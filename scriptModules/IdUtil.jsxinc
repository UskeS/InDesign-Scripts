var Util = {};

/**
 * 与えたファイルパスからファイル名を除外したフォルダパスを返す
 * 
 * @param {string} fn ファイルパス
 * @return {string} ファイル名を除いたフォルダパス
 */
Util.getFolderPath = function(fn) {
    return fn.replace(/[^\/]+$/, "");
};

/**
 * シェルのdateコマンド様のタイムスタンプを取得する
 * 
 * @param {string} [text="%Y%m%d%H%M%S"] dateコマンド形式を含む文字列。
 *     %Y:西暦、%y:西暦の下2桁、%-y:西暦の下2桁（ゼロパディングなし）、
 *     %m:月（ゼロパディングあり）、%-m:月（なし）、
 *     %u:曜日（0:日曜〜6:土曜）、%w:曜日（1:日曜〜7:土曜）、
 *     %d:日（ゼロパディングあり）、%-d:日（なし）、%H:時（ゼロパディングあり）、%-H:時（なし）、
 *     %M:分（ゼロパディングあり）、%-M:分（なし）、%S:秒（ゼロパディングあり）、%-S:秒（なし）、
 *     %%:%文字、%n:改行、%t:タブ、%D:%m/%d/%y、%F:%Y-%m-%-d、%R:%H:%M、%T:%H:%M:%S、
 *     falsyを渡すとデフォルト値「%Y%m%d%H%M%S」を利用する
 * @throws {string} 渡されたテキストに改行文字が含まれるときはエラー
 * @return {string} 指定された形式のタイムスタンプ
 */
Util.getDate = function(text) {
    if (/[\r\n]/.test(text)) {
        throw new Error("改行文字を含むテキストには利用できません");
    }
    if (!text) {
        text = "%Y%m%d%H%M%S"; //デフォルト値
    }
    var T = new Date();
    var O = {
        "%Y": T.getFullYear(),
        "%y": T.getFullYear().toString().slice(-2),
        "%-y": parseInt(T.getFullYear().toString().slice(-2), 10),
        "%m": ("0" + (T.getMonth()+1)).slice(-2),
        "%-m": T.getMonth() + 1,
        "%u": T.getDay(),
        "%w": T.getDay() + 1,
        "%d": ("0" + T.getDate()).slice(-2),
        "%-d": T.getDate(),
        "%H": ("0" + T.getHours()).slice(-2),
        "%-H": T.getHours(),
        "%M": ("0" + T.getMinutes()).slice(-2),
        "%-M": T.getMinutes(),
        "%S": ("0" + T.getSeconds()).slice(-2),
        "%-S": T.getSeconds(),
        "%%": "%",
    };
    O["%D"] = O["%m"] + "/" + O["%d"] + "/" + O["%y"];
    O["%F"] =  O["%Y"] + "-" + O["%m"] + "-" + O["%d"];
    O["%R"] = O["%H"] + ":" + O["%M"];
    O["%T"] =  O["%H"] + ":" + O["%M"] + ":" + O["%S"];

    var re = /%-?[%YymuwdHMSDFRTt]/gm;
    var find;
    while(find = re.exec(text)) {
        if (!find[0]) {continue;}
        if (!O[find[0]]) {continue;}
        text = text.replace(find[0], O[find[0]]);
    }
    text = text.replace(/%n/g, String.fromCharCode(13));
    text = text.replace(/%t/g, String.fromCharCode(9));
    return text;
};

/**
 * ファイルを読み込む
 * 
 * @param {string} filePath ファイルパス
 * @param {object} option Fileオブジェクトのオプション（encodingなどを渡す）
 */
Util.readFile = function(filePath, option) {
    var F = File(filePath);
    var k, r, er;
    if (!F.exists) {
        return null;
    }
    try {
        F.open("r");
        for (k in option) {
            F[k] = option[k];
        }
        r = F.read();
    } catch(e) {
        er = e;
    } finally {
        F.close();
        if (er) {
            throw new Error(er);
        }
    }
    return r;
};

Util.regexModule = function(target, findChange, findOption, changeOption) {
    var method = findChange + "Grep";
    if (findChange !== "find" && findChange !== "change") {
        throw new ReferenceError("第二引数は'find'か'change'です");
    }
    app.findGrepPreferences = app.changeGrepPreferences = null;
    app.findGrepPreferences.properties = findOption;
    if (changeOption) {
        app.changeGrepPreferences.properties = changeOption;
    }
    return target[method]();
};

/**
 * テキストファイルを書き出し
 *
 * @param {string} contents 書き出すテキスト内容
 * @param {string} filePath テキストファイルのパス
 * @param {string} mode 'w'新規・上書きか、'a'末尾に追記
 * @return {boolean} ファイルの書き出しに成功したかどうか
 */
Util.exportTextFile = function(contents, filePath, mode) {
    var F, flag;
    if (!contents || contents.constructor.name !== "String") {
        throw new Error("出力する文字列（第一引数）が不正です");
    }
    if (mode !== "w" && mode !== "a") {
        throw new Error("第三引数は'w'（上書き）か'a'（末尾に追記）を指定してください");
    }
    try {
        F = new File(filePath);
        F.open(mode);
        F.encoding = "UTF-8";
        F.write(contents);
        flag = true;
    } catch(e) {
        alert(e);
    } finally {
        F.close();
    }
    if (!flag) {
        return false;
    }
    return true;
};

Util.XMPtool = {
	ns : "http://ns.chuwa.sytes.net/idcomment/1.0/",
	prefix : "ID_meta:",//custom metada
    f : new Object(),
	read : function(prop){//read exist custom metadata.
        if(xmpLib==undefined) var xmpLib = new ExternalObject('lib:AdobeXMPScript');
		var xmpFile = new XMPFile(this.f.fsName, XMPConst.UNKNOWN, XMPConst.OPEN_FOR_READ);
		var xmpPackets = xmpFile.getXMP();
		var xmp = new XMPMeta(xmpPackets.serialize());
		return xmp.getProperty(this.ns, prop).toString();
    },
	write : function(prop, val){ //argumetns{prop:String/property of custom metadata, val1:String/value} 
        if(xmpLib==undefined) var xmpLib = new ExternalObject('lib:AdobeXMPScript');
		var xmpFile = new XMPFile(this.f.fsName, XMPConst.UNKNOWN, XMPConst.OPEN_FOR_UPDATE);
		var xmp = xmpFile.getXMP();
		var mt = new XMPMeta(xmp.serialize());
		XMPMeta.registerNamespace(this.ns, this.prefix);
		mt.setProperty(this.ns, prop, val);
		if (xmpFile.canPutXMP(xmp)) xmpFile.putXMP(mt);
		xmpFile.closeFile(XMPConst.CLOSE_UPDATE_SAFELY);
    }
};

var callback = function(F) {
    if (F instanceof Folder || /\.indd$/.test(F.name) || /\.pdf$/.test(F.name)) {
        return true;
    }
};
var tgtFolder = Folder("~/desktop/hoge");
var myFiles = tgtFolder.getFiles(callback);
$.writeln(myFiles.length);